	====================DXGI_USAGE====================
	DXGI_USAGE_RENDER_TARGET_OUTPUT		: 렌더 타겟으로 사용
	DXGI_USAGE_SHADER_INPUT				: 쉐이더 입력으로 사용 (텍스처처럼)
	DXGI_USAGE_BACK_BUFFER				: 스왑 체인의 백 버퍼로 사용

	====================DXGI_SWAP_EFFECT====================
	백 버퍼(Back Buffer)와 프론트 버퍼(Front Buffer)를 어떻게 교체할 것인지 결정
	
	DXGI_SWAP_EFFECT_DISCARD			: 사용하지 않는 버퍼는 즉시 삭제됨(구형 DXGI 1.0 방식)
	DXGI_SWAP_EFFECT_SEQUENTIAL			: 프레임을 순차적으로 보존(오래된 방식, vsync 필요)
	DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL	: 백 버퍼가 뒤집혀서(flip) 사용됨(DXGI 1.2 이상에서 추천)
	DXGI_SWAP_EFFECT_FLIP_DISCARD		: 가장 최근의 백 버퍼만 유지하며 이전 버퍼를 버림(DirectX 12에서 최적화됨)

	====================DXGI_MODE_SCANLINE_ORDER====================
	디스플레이는 화면을 한 줄(Scanline)씩 순차적으로 그리는 방식을 사용
	인터레이스(Interlaced) 방식과 프로그레시브(Progressive) 방식이 존재
	 
	DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED		: 특정 스캔라인 순서를 지정하지 않고 디스플레이 기본 설정을 따름
	DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE		: 모든 라인을 순서대로 출력 (보통 LCD/LED 모니터에서 사용)
	DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST	: 인터레이스 방식(짝수 줄 먼저 그린 후 홀수 줄 그리기)
	DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST	: 인터레이스 방식(홀수 줄 먼저 그린 후 짝수 줄 그리기)

	====================DXGI_MODE_SCALING====================
	렌더링된 프레임(이미지)의 크기가 디스플레이 크기와 다를 때 크기를 조정하는 방식
	
	DXGI_MODE_SCALING_UNSPECIFIED	: 스케일링 옵션을 명시적으로 설정하지 않고 디스플레이 기본값을 따름
	DXGI_MODE_SCALING_CENTERED		: 해상도가 다르면 이미지를 중앙에 배치하고 남은 부분은 검은색(블랙 바)으로 채움
	DXGI_MODE_SCALING_STRETCHED		: 해상도가 다르면 이미지를 화면 크기에 맞게 늘려서 출력

	====================D3D12_DESCRIPTOR_HEAP_TYPE====================
	디스크립터 힙의 유형을 지정

	D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV		: 상수 버퍼(CBV), 쉐이더 리소스(SRV), 언오더드 액세스(UAV) 뷰 저장용
	D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER			: 샘플러 디스크립터 저장용
	D3D12_DESCRIPTOR_HEAP_TYPE_RTV				: 렌더 타겟 뷰 저장용
	D3D12_DESCRIPTOR_HEAP_TYPE_DSV				: 깊이-스텐실 뷰 저장용

	====================D3D12_DESCRIPTOR_HEAP_FLAGS====================
	디스크립터 힙의 접근 권한을 설정

	D3D12_DESCRIPTOR_HEAP_FLAG_NONE				: CPU 전용, GPU에서 접근 불가
	D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE	: GPU에서 쉐이더 리소스로 접근 가능

	====================D3D_FEATURE_LEVEL====================
	Direct3D에서 지원하는 기능 수준(Feature Level)을 정의하는 열거형
	지원하는 GPU 하드웨어가 어느 수준까지 Direct3D 기능을 제공하는지 결정

	D3D_FEATURE_LEVEL_9_1		: Direct3D 9.1 (구형 GPU 지원)
	D3D_FEATURE_LEVEL_9_2		: Direct3D 9.2
	D3D_FEATURE_LEVEL_9_3		: Direct3D 9.3
	D3D_FEATURE_LEVEL_10_0		: Direct3D 10.0 (셰이더 모델 4.0 지원)
	D3D_FEATURE_LEVEL_10_1		: Direct3D 10.1
	D3D_FEATURE_LEVEL_11_0		: Direct3D 11.0 (셰이더 모델 5.0 지원)
	D3D_FEATURE_LEVEL_11_1		: Direct3D 11.1
	D3D_FEATURE_LEVEL_12_0		: Direct3D 12.0 (셰이더 모델 5.1 지원)
	D3D_FEATURE_LEVEL_12_1		: Direct3D 12.1
	D3D_FEATURE_LEVEL_12_2		: Direct3D 12.2 (DXR 레이 트레이싱 지원)

	====================D3D12_COMMAND_LIST_TYPE====================
	커맨드 리스트의 유형을 정의하는 열거형

	D3D12_COMMAND_LIST_TYPE_DIRECT				: GPU가 렌더링 및 일반적인 그래픽 연산을 수행
	D3D12_COMMAND_LIST_TYPE_BUNDLE				: 기존 DIRECT 명령 리스트를 재사용하기 위한 리스트
	D3D12_COMMAND_LIST_TYPE_COMPUTE				: 컴퓨팅 전용(Compute Shader) 작업 수행
	D3D12_COMMAND_LIST_TYPE_COPY				: 리소스 복사 및 데이터 전송 전용
	D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE		: 비디오 디코딩 (DirectX Video API)
	D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS		: 비디오 프로세싱 (후처리 효과)
	D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE		: 비디오 인코딩

	====================D3D12_FENCE_FLAGS====================
	ID3D12Fence 객체의 동작을 설정하는 플래그

	D3D12_FENCE_FLAG_NONE						: 기본 동작
	D3D12_FENCE_FLAG_SHARED						: 다른 프로세스와 공유 가능
	D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER		: 여러 GPU 어댑터에서 공유 가능
	D3D12_FENCE_FLAG_NON_MONITORED				: OS의 신호 모니터링을 비활성화

	====================D3D12_COMMAND_QUEUE_FLAGS====================
	커맨드 큐의 동작을 정의하는 플래그

	D3D12_COMMAND_QUEUE_FLAG_NONE						: 기본 설정
	D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT		: GPU 타임아웃 비활성화 (TDR 방지)

	====================D3D12_BLEND====================
	블렌딩 모드를 정의하는 열거형

	D3D12_BLEND_ZERO				: 0.0 (완전 투명)
	D3D12_BLEND_ONE					: 1.0 (완전 불투명)
	D3D12_BLEND_SRC_COLOR			: 소스 색상 사용
	D3D12_BLEND_INV_SRC_COLOR		: 소스 색상의 역값 사용
	D3D12_BLEND_SRC_ALPHA			: 소스 알파 사용
	D3D12_BLEND_INV_SRC_ALPHA		: 소스 알파의 역값 사용
	D3D12_BLEND_DEST_ALPHA			: 대상 알파 사용
	D3D12_BLEND_INV_DEST_ALPHA		: 대상 알파의 역값 사용
	D3D12_BLEND_DEST_COLOR			: 대상 색상 사용
	D3D12_BLEND_INV_DEST_COLOR		: 대상 색상의 역값 사용

	====================D3D12_BLEND_OP====================
	블렌딩 연산 방식을 정의
	D3D12_BLEND_OP_ADD				: Src + Dest
	D3D12_BLEND_OP_SUBTRACT			: Src - Dest
	D3D12_BLEND_OP_REV_SUBTRACT		: Dest - Src
	D3D12_BLEND_OP_MIN				: 최소값 선택
	D3D12_BLEND_OP_MAX				: 최대값 선택

	====================D3D12_LOGIC_OP====================
	픽셀 데이터를 조합할 때 논리 연산(logical operations) 을 수행하는 옵션을 설정

	D3D12_LOGIC_OP_CLEAR			: 결과를 0으로 설정
	D3D12_LOGIC_OP_SET				: 결과를 1로 설정 (모든 비트가 켜짐)
	D3D12_LOGIC_OP_COPY				: 소스 값을 그대로 사용
	D3D12_LOGIC_OP_COPY_INVERTED	: 소스 값을 반전
	D3D12_LOGIC_OP_NOOP				: 대상 값을 유지 (변화 없음)
	D3D12_LOGIC_OP_INVERT			: 대상 값을 반전
	D3D12_LOGIC_OP_AND				: 소스와 대상의 AND 연산
	D3D12_LOGIC_OP_NAND				: AND 연산의 반대
	D3D12_LOGIC_OP_OR				: 소스와 대상의 OR 연산
	D3D12_LOGIC_OP_NOR				: OR 연산 후 전체를 반전
	D3D12_LOGIC_OP_XOR				: 소스와 대상이 다를 때만 1
	D3D12_LOGIC_OP_EQUIV			: XOR의 반대 (같을 때만 1)
	D3D12_LOGIC_OP_AND_REVERSE		: 소스가 1이고 대상이 0일 때만 1
	D3D12_LOGIC_OP_AND_INVERTED		: 소스가 0이고 대상이 1일 때만 1
	D3D12_LOGIC_OP_OR_REVERSE		: 소스는 그대로 대상을 반전시킨 후 OR연산 수행
	D3D12_LOGIC_OP_OR_INVERTED		: 소스를 반전시킨 후 OR연산 수행

	====================D3D12_RESOURCE_DIMENSION====================
	리소스(텍스처, 버퍼)의 차원을 정의

	D3D12_RESOURCE_DIMENSION_BUFFER			: 버퍼
	D3D12_RESOURCE_DIMENSION_TEXTURE1D		: 1D 텍스처
	D3D12_RESOURCE_DIMENSION_TEXTURE2D		: 2D 텍스처
	D3D12_RESOURCE_DIMENSION_TEXTURE3D		: 3D 텍스처

	====================D3D12_TEXTURE_LAYOUT====================
	텍스처의 메모리 배치를 정의

	D3D12_TEXTURE_LAYOUT_UNKNOWN					: 기본 값 (드라이버가 결정)
	D3D12_TEXTURE_LAYOUT_ROW_MAJOR					: 행 단위 배치
	D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE		: 64KB 블록 배치 (미정의)
	D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE		: 64KB 블록 배치 (표준)

	====================D3D12_RESOURCE_FLAGS====================
	리소스(버퍼, 텍스처)의 속성을 정의

	D3D12_RESOURCE_FLAG_NONE							: 기본 설정
	D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET				: 렌더 타겟으로 사용 가능
	D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL				: 깊이(Depth) 또는 스텐실(Stencil) 버퍼로 사용 가능
	D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS			: UAV (Unordered Access View) 허용
	D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE			: 쉐이더 리소스로 사용 불가능
	D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER				: 여러 GPU에서 공유 가능
	D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS		: 여러 큐에서 동시에 접근 가능

	====================D3D12_RESOURCE_STATES====================
	GPU가 리소스를 어떻게 접근할 수 있는지를 나타내는 값

	D3D12_RESOURCE_STATE_COMMON								: 일반적인 상태 (기본값)
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER			: 버텍스/상수 버퍼로 사용됨
	D3D12_RESOURCE_STATE_INDEX_BUFFER						: 인덱스 버퍼로 사용됨
	D3D12_RESOURCE_STATE_RENDER_TARGET						: 렌더 타겟으로 사용됨
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS					: UAV (Unordered Access View) 로 사용됨
	D3D12_RESOURCE_STATE_DEPTH_WRITE						: 깊이 버퍼 쓰기 가능
	D3D12_RESOURCE_STATE_DEPTH_READ							: 깊이 버퍼 읽기 가능
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE			: 픽셀 쉐이더 외에서 리소스 읽기 가능
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE				: 픽셀 쉐이더에서 리소스 읽기 가능
	D3D12_RESOURCE_STATE_COPY_DEST							: 복사 대상
	D3D12_RESOURCE_STATE_COPY_SOURCE						: 복사 소스
	D3D12_RESOURCE_STATE_PRESENT							: 화면 출력 가능 상태

	====================D3D12_FILL_MODE====================
	렌더링할 때 폴리곤을 어떻게 채울지를 설정

	D3D12_FILL_MODE_WIREFRAME		: 와이어프레임 모드 (선으로만 표현)
	D3D12_FILL_MODE_SOLID			: 일반적인 솔리드 모드 (면을 채운다)

	====================D3D12_CULL_MODE====================
	GPU가 폴리곤을 렌더링할 때 특정 면을 제거하는 방법을 설정

	D3D12_CULL_MODE_NONE		: 컬링 없음 (모든 면 렌더링)
	D3D12_CULL_MODE_FRONT		: 앞면 컬링 (카메라를 향한 면 제거)
	D3D12_CULL_MODE_BACK		: 뒷면 컬링 (카메라 반대 방향의 면 제거, 기본값)

	====================D3D12_CONSERVATIVE_RASTERIZATION_MODE====================
	픽셀을 얼마나 보수적으로 포함할지를 설정

	D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF		: 기본 모드 (픽셀이 포함될 때만 렌더링)
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON		: 보수적 모드 (경계에 걸쳐있는 픽셀도 포함)

	====================D3D12_DSV_DIMENSION====================
	Depth-Stencil View(DSV)의 차원을 지정

	D3D12_DSV_DIMENSION_UNKNOWN					: 알 수 없는 형식(사용되지 않음)
	D3D12_DSV_DIMENSION_TEXTURE1D				: 1D 텍스처로 DSV 생성
	D3D12_DSV_DIMENSION_TEXTURE1DARRAY			: 1D 텍스처 배열로 DSV 생성
	D3D12_DSV_DIMENSION_TEXTURE2D				: 2D 텍스처로 DSV 생성
	D3D12_DSV_DIMENSION_TEXTURE2DARRAY			: 2D 텍스처 배열로 DSV 생성
	D3D12_DSV_DIMENSION_TEXTURE2DMS				: 멀티 샘플링이 적용된 2D 텍스처로 DSV 생성
	D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY		: 멀티 샘플링이 적용된 2D 텍스처 배열로 DSV 생성

	====================D3D12_DSV_FLAGS====================
	DSV 생성 시 사용되는 플래그

	D3D12_DSV_FLAG_NONE						: 특별한 동작 없이 기본 DSV로 사용
	D3D12_DSV_FLAG_READ_ONLY_DEPTH			: 깊이(depth) 값을 읽기 전용으로 설정
	D3D12_DSV_FLAG_READ_ONLY_STENCIL		: 스텐실(stencil) 값을 읽기 전용으로 설정

	====================DXGI_FORMAT====================
	다양한 데이터 형식(픽셀 포맷 등)을 정의
	UNORM(정규화 부호 없는 정수), SINT/UINT(정수), FLOAT(부동소수점) 등 여러 유형이 있음
	압축 포맷(BC1~BC7)을 이용하면 VRAM 사용량을 절약할 수 있음
	HDR 렌더링에는 부동소수점 포맷(R16G16B16A16_FLOAT, R11G11B10_FLOAT)을 주로 사용

	DXGI_FORMAT_R8_UNORM				: 8비트 단일 채널(0~1 범위)
	DXGI_FORMAT_R8G8_UNORM				: 8비트 2채널 (0~1 범위)
	DXGI_FORMAT_R8G8B8A8_UNORM			: 8비트 4채널 (0~1 범위)
	DXGI_FORMAT_B8G8R8A8_UNORM			: 8비트 BGRA 순서 (0~1 범위)
	DXGI_FORMAT_R16_UNORM				: 16비트 단일 채널 (0~1 범위)
	DXGI_FORMAT_R16G16B16A16_UNORM		: 16비트 4채널 (0~1 범위)
	DXGI_FORMAT_R8_UINT			: 8비트 부호 없는 정수 (0~255)
	DXGI_FORMAT_R8_SINT			: 8비트 부호 있는 정수 (-128~127)
	DXGI_FORMAT_R16_UINT		: 16비트 부호 없는 정수
	DXGI_FORMAT_R16_SINT		: 16비트 부호 있는 정수
	DXGI_FORMAT_R32_UINT		: 32비트 부호 없는 정수
	DXGI_FORMAT_R32_SINT		: 32비트 부호 있는 정수
	DXGI_FORMAT_R16_FLOAT				: 16비트 부동소수점
	DXGI_FORMAT_R32_FLOAT				: 32비트 부동소수점
	DXGI_FORMAT_R16G16B16A16_FLOAT		: 16비트 4채널 부동소수점
	DXGI_FORMAT_R32G32B32A32_FLOAT		: 32비트 4채널 부동소수점
	DXGI_FORMAT_D32_FLOAT			: 32비트 부동소수점 깊이 값
	DXGI_FORMAT_D24_UNORM_S8_UINT	: 24비트 깊이 + 8비트 스텐실 값
	DXGI_FORMAT_D16_UNORM			: 16비트 깊이 값
	DXGI_FORMAT_BC1_UNORM		: 블록 압축 BC1 (DXT1), RGB 텍스처 압축
	DXGI_FORMAT_BC2_UNORM		: 블록 압축 BC2 (DXT3), 알파 포함 압축
	DXGI_FORMAT_BC3_UNORM		: 블록 압축 BC3 (DXT5), 높은 품질의 알파 지원
	DXGI_FORMAT_BC4_UNORM		: 블록 압축 BC4, 단일 채널 압축
	DXGI_FORMAT_BC5_UNORM		: 블록 압축 BC5, 두 개의 채널 압축
	DXGI_FORMAT_BC7_UNORM		: 블록 압축 BC7, HDR 지원
	DXGI_FORMAT_R1_UNORM				: 1비트 단일 채널 포맷 (마스크/쉐이더 용도)
	DXGI_FORMAT_R10G10B10A2_UNORM		: 10비트 RGB + 2비트 알파
	DXGI_FORMAT_R11G11B10_FLOAT			: 11/11/10 비트 부동소수점 포맷 (HDR 용도)

	====================D3D12_TEXTURE_ADDRESS_MODE====================
	텍스처 샘플링 시 좌표가 범위를 벗어날 때의 동작을 지정

	D3D12_TEXTURE_ADDRESS_MODE_WRAP				: 좌표를 반복(0~1 범위를 벗어나면 반복됨)
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR			: 좌표를 미러링하여 반복
	D3D12_TEXTURE_ADDRESS_MODE_CLAMP			: 좌표를 0~1 범위로 제한
	D3D12_TEXTURE_ADDRESS_MODE_BORDER			: 초과된 영역을 지정된 경계색으로 채움
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE		: 0에서 1까지 미러링 후 클램핑

	====================D3D12_STATIC_BORDER_COLOR====================
	D3D12_TEXTURE_ADDRESS_MODE_BORDER에서 사용되는 경계 색상

	D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK		: 투명한 검은색 (0,0,0,0)
	D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK			: 불투명한 검은색 (0,0,0,1)
	D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE			: 불투명한 흰색 (1,1,1,1)

	====================D3D12_COMPARISON_FUNC====================
	깊이 테스트 및 기타 비교 연산에 사용

	D3D12_COMPARISON_FUNC_NEVER				비교가 항상 실패
	D3D12_COMPARISON_FUNC_LESS				입력 값이 기준 값보다 작으면 통과
	D3D12_COMPARISON_FUNC_EQUAL				입력 값이 기준 값과 같으면 통과
	D3D12_COMPARISON_FUNC_LESS_EQUAL		입력 값이 기준 값보다 작거나 같으면 통과
	D3D12_COMPARISON_FUNC_GREATER			입력 값이 기준 값보다 크면 통과
	D3D12_COMPARISON_FUNC_NOT_EQUAL			입력 값이 기준 값과 다르면 통과
	D3D12_COMPARISON_FUNC_GREATER_EQUAL		입력 값이 기준 값보다 크거나 같으면 통과
	D3D12_COMPARISON_FUNC_ALWAYS			비교가 항상 성공

	====================D3D12_SHADER_VISIBILITY====================
	쉐이더 스테이지에서 리소스를 사용할 수 있는 범위를 정의

	D3D12_SHADER_VISIBILITY_ALL				: 모든 셰이더 스테이지에서 가시성 제공
	D3D12_SHADER_VISIBILITY_VERTEX			: 버텍스 셰이더에서만 사용 가능
	D3D12_SHADER_VISIBILITY_HULL			: 헐 셰이더에서만 사용 가능
	D3D12_SHADER_VISIBILITY_DOMAIN			: 도메인 셰이더에서만 사용 가능
	D3D12_SHADER_VISIBILITY_GEOMETRY		: 지오메트리 셰이더에서만 사용 가능
	D3D12_SHADER_VISIBILITY_PIXEL			: 픽셀 셰이더에서만 사용 가능

	====================D3D12_DESCRIPTOR_RANGE_TYPE====================
	쉐이더에서 접근할 수 있는 리소스 유형을 정의

	D3D12_DESCRIPTOR_RANGE_TYPE_SRV			: 셰이더 리소스 뷰(SRV)
	D3D12_DESCRIPTOR_RANGE_TYPE_UAV			: 언오더드 액세스 뷰(UAV)
	D3D12_DESCRIPTOR_RANGE_TYPE_CBV			: 상수 버퍼 뷰(CBV)
	D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER		: 샘플러

	====================D3D12_ROOT_SIGNATURE_FLAGS====================
	루트 시그니처의 특성을 정의

	D3D12_ROOT_SIGNATURE_FLAG_NONE										: 특별한 동작 없음
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT		: 입력 어셈블러 단계에서 레이아웃 허용
	D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS			: 버텍스 쉐이더의 루트 서명 액세스 차단
	D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS				: 픽셀 쉐이더의 루트 서명 액세스 차단

	====================D3D_ROOT_SIGNATURE_VERSION====================
	루트 시그니처의 버전을 정의

	D3D_ROOT_SIGNATURE_VERSION_1_0		: D3D12에서 사용 가능한 초기 버전
	D3D_ROOT_SIGNATURE_VERSION_1_1		: 향상된 기능을 제공하는 최신 버전

	====================D3D12_PRIMITIVE_TOPOLOGY_TYPE====================
	정점의 연결 방식을 정의

	D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED		: 정의되지 않음
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT			: 점 리스트
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE			: 선 리스트 및 선 스트립
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE		: 삼각형 리스트 및 삼각형 스트립

	====================D3D12_RESOURCE_BARRIER_TYPE====================
	리소스 상태 전환을 정의

	D3D12_RESOURCE_BARRIER_TYPE_TRANSITION		: 리소스 상태 전환
	D3D12_RESOURCE_BARRIER_TYPE_ALIASING		: 리소스 별칭 전환
	D3D12_RESOURCE_BARRIER_TYPE_UAV				: UAV 동기화

	====================D3D12_RESOURCE_BARRIER_FLAGS====================
	D3D12_RESOURCE_BARRIER 구조체에서 특정 동작을 제어하는 데 사용

	D3D12_RESOURCE_BARRIER_FLAG_NONE			: 기본 상태, 특별한 플래그 없음
	D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY		: 배리어를 시작하는 상태로 설정, END_ONLY와 함께 사용해야 함
	D3D12_RESOURCE_BARRIER_FLAG_END_ONLY		: 배리어를 끝내는 상태로 설정, BEGIN_ONLY와 함께 사용해야 함